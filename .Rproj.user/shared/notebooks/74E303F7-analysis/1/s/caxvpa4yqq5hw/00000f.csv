"0","# Build models for each token"
"0","build_token_models <- function(prediction_data) {"
"0","  if(is.null(prediction_data) || nrow(prediction_data) == 0) {"
"0","    return(NULL)"
"0","  }"
"0","  "
"0","  token_models <- list()"
"0","  prediction_results <- data.frame()"
"0","  "
"0","  # For each token"
"0","  for(token_name in unique(prediction_data$token)) {"
"0","    cat(""\nBuilding models for"", token_name, ""\n"")"
"0","    token_data <- prediction_data %>%"
"0","      filter(token == token_name)"
"0","    "
"0","    # Skip if insufficient data"
"0","    if(nrow(token_data) < 10) {"
"0","      cat(""Insufficient data for"", token_name, ""prediction model\n"")"
"0","      next"
"0","    }"
"0","    "
"0","    # Print data distribution by period"
"0","    token_data %>%"
"0","      group_by(period_indicator) %>%"
"0","      summarize("
"0","        count = n(),"
"0","        avg_deviation = mean(peg_deviation),"
"0","        .groups = ""drop"""
"0","      ) %>%"
"0","      mutate("
"0","        period = case_when("
"0","          period_indicator == 0 ~ ""Pre-crash"","
"0","          period_indicator == 1 ~ ""Crash"","
"0","          period_indicator == 2 ~ ""Post-crash"""
"0","        )"
"0","      ) %>%"
"0","      select(period, count, avg_deviation) %>%"
"0","      knitr::kable()"
"0","    "
"0","    # Split into training and test sets (80/20)"
"0","    train_idx <- 1:floor(0.8 * nrow(token_data))"
"0","    train_data <- token_data[train_idx, ]"
"0","    test_data <- token_data[-train_idx, ]"
"0","    "
"0","    cat(""Training set:"", nrow(train_data), ""observations\n"")"
"0","    cat(""Test set:"", nrow(test_data), ""observations\n"")"
"0","    "
"0","    # Skip if test set is too small"
"0","    if(nrow(test_data) < 3) {"
"0","      cat(""Test set too small for"", token_name, ""\n"")"
"0","      next"
"0","    }"
"0","    "
"0","    # Build linear regression model"
"0","    lm_model <- lm(peg_deviation ~ prev_deviation + rolling_avg + volatility + is_weekend + period_indicator, "
"0","                  data = train_data)"
"0","    "
"0","    # Print model summary"
"0","    cat(""\nLinear Regression Summary for"", token_name, "":\n"")"
"0","    print(summary(lm_model))"
"0","    "
"0","    # Make predictions with linear model"
"0","    lm_preds <- predict(lm_model, newdata = test_data)"
"0","    "
"0","    # Calculate metrics"
"0","    lm_rmse <- sqrt(mean((lm_preds - test_data$peg_deviation)^2))"
"0","    lm_mae <- mean(abs(lm_preds - test_data$peg_deviation))"
"0","    lm_r2 <- cor(lm_preds, test_data$peg_deviation)^2"
"0","    "
"0","    # Store results"
"0","    lm_results <- data.frame("
"0","      token = token_name,"
"0","      model = ""Linear Regression"","
"0","      rmse = lm_rmse,"
"0","      mae = lm_mae,"
"0","      r_squared = lm_r2"
"0","    )"
"0","    "
"0","    prediction_results <- rbind(prediction_results, lm_results)"
"0","    "
"0","    # Store model"
"0","    token_models[[token_name]] <- list(lm = lm_model)"
"0","    "
"0","    # Try LASSO if enough data"
"0","    if(nrow(train_data) >= 15) {"
"0","      tryCatch({"
"0","        if(!require(glmnet)) {"
"0","          install.packages(""glmnet"")"
"0","          library(glmnet)"
"0","        }"
"0","        "
"0","        # Prepare data for LASSO"
"0","        x_vars <- c(""prev_deviation"", ""rolling_avg"", ""volatility"", ""is_weekend"", ""period_indicator"")"
"0","        x_train <- as.matrix(train_data[, x_vars])"
"0","        y_train <- train_data$peg_deviation"
"0","        "
"0","        # Run LASSO with cross-validation"
"0","        set.seed(123)"
"0","        lasso_cv <- cv.glmnet(x_train, y_train, alpha = 1)"
"0","        "
"0","        # Plot LASSO cross-validation"
"0","        plot(lasso_cv)"
"0","        title(main = paste(""LASSO Cross-Validation for"", token_name))"
"0","        "
"0","        # Get optimal lambda"
"0","        best_lambda <- lasso_cv$lambda.min"
"0","        cat(""\nBest lambda for"", token_name, "":"", best_lambda, ""\n"")"
"0","        "
"0","        # Fit LASSO with optimal lambda"
"0","        lasso_model <- glmnet(x_train, y_train, alpha = 1, lambda = best_lambda)"
"0","        "
"0","        # Print coefficients"
"0","        cat(""LASSO Coefficients:\n"")"
"0","        lasso_coefs <- coef(lasso_model)"
"0","        print(lasso_coefs)"
"0","        "
"0","        # Make predictions"
"0","        x_test <- as.matrix(test_data[, x_vars])"
"0","        lasso_preds <- predict(lasso_model, newx = x_test)"
"0","        "
"0","        # Calculate metrics"
"0","        lasso_rmse <- sqrt(mean((lasso_preds - test_data$peg_deviation)^2))"
"0","        lasso_mae <- mean(abs(lasso_preds - test_data$peg_deviation))"
"0","        lasso_r2 <- cor(lasso_preds, test_data$peg_deviation)^2"
"0","        "
"0","        # Store results"
"0","        lasso_results <- data.frame("
"0","          token = token_name,"
"0","          model = ""LASSO"","
"0","          rmse = lasso_rmse,"
"0","          mae = lasso_mae,"
"0","          r_squared = lasso_r2"
"0","        )"
"0","        "
"0","        prediction_results <- rbind(prediction_results, lasso_results)"
"0","        "
"0","        # Store model"
"0","        token_models[[token_name]][[""lasso""]] <- lasso_model"
"0","        token_models[[token_name]][[""lasso_cv""]] <- lasso_cv"
"0","        "
"0","      }, error = function(e) {"
"0","        cat(""LASSO failed for"", token_name, "":"", e$message, ""\n"")"
"0","      })"
"0","    } else {"
"0","      cat(""Insufficient data for LASSO for"", token_name, ""\n"")"
"0","    }"
"0","    "
"0","    # Add predictions to test data"
"0","    test_data$predicted_lm <- lm_preds"
"0","    if(exists(""lasso_preds"")) {"
"0","      test_data$predicted_lasso <- lasso_preds"
"0","    }"
"0","    "
"0","    # Store test data with predictions"
"0","    token_models[[token_name]][[""test_data""]] <- test_data"
"0","  }"
"0","  "
"0","  return(list("
"0","    models = token_models,"
"0","    results = prediction_results"
"0","  ))"
"0","}"
"0",""
"0","# Build models"
"0","token_model_results <- build_token_models(prediction_data)"
"1","
Building models for"
"1"," "
"1","DAI"
"1"," "
"1","
"
"1","Training set:"
"1"," "
"1","170"
"1"," "
"1","observations
"
"1","Test set:"
"1"," "
"1","43"
"1"," "
"1","observations
"
"1","
Linear Regression Summary for"
"1"," "
"1","DAI"
"1"," "
"1",":
"
"1","
Call:
"
"1",""
"1","lm(formula = peg_deviation ~ prev_deviation + rolling_avg + volatility + 
    is_weekend + period_indicator, data = train_data)"
"1",""
"1","

"
"1",""
"1","Residuals:
"
"1","       Min "
"1","        1Q "
"1","    Median "
"1","        3Q "
"1","       Max "
"1","
"
"1","-7.309e-04 "
"1","-1.166e-04 "
"1"," 1.160e-06 "
"1"," 1.170e-04 "
"1"," 8.071e-04 "
"1","
"
"1","
Coefficients: ("
"1",""
"1","1"
"1",""
"1"," not defined because of singularities)
"
"1","                "
"1","   Estimate"
"1"," Std. Error"
"1"," t value"
"1"," Pr(>|t|)"
"1","    "
"1","
(Intercept)     "
"1"," -1.157e-06"
"1","  3.234e-05"
"1","  -0.036"
"1","    0.972"
"1","    "
"1","
prev_deviation  "
"1"," -4.877e-01"
"1","  6.958e-02"
"1","  -7.009"
"1"," 5.83e-11"
"1"," ***"
"1","
rolling_avg     "
"1","  1.620e+00"
"1","  1.477e-01"
"1","  10.968"
"1","  < 2e-16"
"1"," ***"
"1","
volatility      "
"1"," -2.006e-01"
"1","  1.320e-01"
"1","  -1.520"
"1","    0.131"
"1","    "
"1","
is_weekend      "
"1","  6.279e-05"
"1","  4.055e-05"
"1","   1.549"
"1","    0.123"
"1","    "
"1","
period_indicator"
"1","         NA"
"1","         NA"
"1","      NA"
"1","       NA"
"1","    "
"1","
"
"1","---
Signif. codes:  "
"1",""
"1","0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"
"1","
"
"1","
Residual standard error:"
"1"," "
"1","0.000239"
"1"," "
"1","on"
"1"," "
"1","165"
"1"," "
"1","degrees of freedom"
"1","
"
"1","Multiple R-squared: "
"1"," "
"1","0.5301"
"1",",	Adjusted R-squared: "
"1"," "
"1","0.5187"
"1"," "
"1","
F-statistic:"
"1"," "
"1","46.54"
"1"," "
"1","on"
"1"," "
"1","4"
"1"," "
"1","and"
"1"," "
"1","165"
"1"," "
"1","DF,  p-value:"
"1"," "
"1","< 2.2e-16"
"1","
"
"1","
"
"1","
Best lambda for"
"1"," "
"1","DAI"
"1"," "
"1",":"
"1"," "
"1","4.234605e-06"
"1"," "
"1","
"
"1","LASSO Coefficients:
"
"1","6 x 1 sparse Matrix of class ""dgCMatrix""
"
"1","                "
"1","            s0"
"1","
(Intercept)     "
"1","  6.912650e-07"
"1","
prev_deviation  "
"1"," -4.519922e-01"
"1","
rolling_avg     "
"1","  1.508734e+00"
"1","
volatility      "
"1"," -1.226076e-01"
"1","
is_weekend      "
"1","  5.649416e-05"
"1","
period_indicator"
"1","  .           "
"1","
"
"1","
Building models for"
"1"," "
"1","PAX"
"1"," "
"1","
"
"1","Training set:"
"1"," "
"1","170"
"1"," "
"1","observations
"
"1","Test set:"
"1"," "
"1","43"
"1"," "
"1","observations
"
"1","
Linear Regression Summary for"
"1"," "
"1","PAX"
"1"," "
"1",":
"
"1","
Call:
"
"1",""
"1","lm(formula = peg_deviation ~ prev_deviation + rolling_avg + volatility + 
    is_weekend + period_indicator, data = train_data)"
"1",""
"1","

"
"1",""
"1","Residuals:
"
"1","       Min "
"1","        1Q "
"1","    Median "
"1","        3Q "
"1","       Max "
"1","
"
"1","-0.0049951 "
"1","-0.0002303 "
"1"," 0.0000205 "
"1"," 0.0003100 "
"1"," 0.0050049 "
"1","
"
"1","
Coefficients: ("
"1",""
"1","1"
"1",""
"1"," not defined because of singularities)
"
"1","                "
"1","   Estimate"
"1"," Std. Error"
"1"," t value"
"1"," Pr(>|t|)"
"1","    "
"1","
(Intercept)     "
"1"," -2.053e-05"
"1","  1.282e-04"
"1","  -0.160"
"1","    0.873"
"1","    "
"1","
prev_deviation  "
"1"," -5.101e-01"
"1","  7.173e-02"
"1","  -7.111"
"1"," 3.32e-11"
"1"," ***"
"1","
rolling_avg     "
"1","  1.537e+00"
"1","  1.846e-01"
"1","   8.326"
"1"," 3.05e-14"
"1"," ***"
"1","
volatility      "
"1"," -1.882e-02"
"1","  1.282e-01"
"1","  -0.147"
"1","    0.883"
"1","    "
"1","
is_weekend      "
"1","  8.752e-05"
"1","  1.860e-04"
"1","   0.470"
"1","    0.639"
"1","    "
"1","
period_indicator"
"1","         NA"
"1","         NA"
"1","      NA"
"1","       NA"
"1","    "
"1","
"
"1","---
Signif. codes:  "
"1",""
"1","0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"
"1","
"
"1","
Residual standard error:"
"1"," "
"1","0.001103"
"1"," "
"1","on"
"1"," "
"1","165"
"1"," "
"1","degrees of freedom"
"1","
"
"1","Multiple R-squared: "
"1"," "
"1","0.4961"
"1",",	Adjusted R-squared: "
"1"," "
"1","0.4839"
"1"," "
"1","
F-statistic:"
"1"," "
"1","40.62"
"1"," "
"1","on"
"1"," "
"1","4"
"1"," "
"1","and"
"1"," "
"1","165"
"1"," "
"1","DF,  p-value:"
"1"," "
"1","< 2.2e-16"
"1","
"
"1","
"
