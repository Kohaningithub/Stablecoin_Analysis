"0","# Create prediction data from stability metrics"
"0","if(!is.null(results$stability$daily) && nrow(results$stability$daily) > 0) {"
"0","  # Create prediction dataset"
"0","  prediction_data <- results$stability$daily %>%"
"0","    arrange(token, date) %>%"
"0","    group_by(token) %>%"
"0","    mutate("
"0","      # Create lagged features"
"0","      prev_deviation = lag(peg_deviation, 1),"
"0","      rolling_avg = zoo::rollmean(peg_deviation, k = 3, fill = NA, align = ""right""),"
"0","      is_weekend = ifelse(lubridate::wday(date) %in% c(1, 7), 1, 0),"
"0","      period_indicator = case_when("
"0","        period == ""pre_crash"" ~ 0,"
"0","        period == ""crash_period"" ~ 1,"
"0","        period == ""post_crash"" ~ 2"
"0","      )"
"0","    ) %>%"
"0","    # Remove rows with NA values"
"0","    filter(!is.na(prev_deviation), !is.na(rolling_avg)) %>%"
"0","    ungroup()"
"0","  "
"0","  cat(""Created prediction dataset with"", nrow(prediction_data), ""observations\n"")"
"0","  "
"0","  # Implement alternative prediction methods"
"0","  implement_alternative_models <- function(prediction_data) {"
"0","    if(is.null(prediction_data) || nrow(prediction_data) == 0) {"
"0","      cat(""No prediction data available\n"")"
"0","      return(NULL)"
"0","    }"
"0","    "
"0","    # Ensure required packages"
"0","    required_packages <- c(""rpart"", ""randomForest"", ""pls"")"
"0","    for(pkg in required_packages) {"
"0","      if(!requireNamespace(pkg, quietly = TRUE)) {"
"0","        cat(""Installing package:"", pkg, ""\n"")"
"0","        install.packages(pkg)"
"0","      }"
"0","      library(pkg, character.only = TRUE)"
"0","    }"
"0","    "
"0","    # Results storage"
"0","    alternative_results <- data.frame()"
"0","    model_objects <- list()"
"0","    "
"0","    # For each token"
"0","    for(token_name in unique(prediction_data$token)) {"
"0","      cat(""\nBuilding alternative models for"", token_name, ""\n"")"
"0","      token_data <- prediction_data %>%"
"0","        filter(token == token_name)"
"0","      "
"0","      # Skip if insufficient data"
"0","      if(nrow(token_data) < 10) {"
"0","        cat(""Insufficient data for"", token_name, ""alternative models\n"")"
"0","        next"
"0","      }"
"0","      "
"0","      # Split into training and test sets (80/20)"
"0","      train_idx <- 1:floor(0.8 * nrow(token_data))"
"0","      train_data <- token_data[train_idx, ]"
"0","      test_data <- token_data[-train_idx, ]"
"0","      "
"0","      cat(""Training set:"", nrow(train_data), ""observations\n"")"
"0","      cat(""Test set:"", nrow(test_data), ""observations\n"")"
"0","      "
"0","      # Skip if test set is too small"
"0","      if(nrow(test_data) < 3) {"
"0","        cat(""Test set too small for"", token_name, ""\n"")"
"0","        next"
"0","      }"
"0","      "
"0","      # Prepare model formula and data matrices"
"0","      model_formula <- peg_deviation ~ prev_deviation + rolling_avg + volatility + is_weekend + period_indicator"
"0","      "
"0","      # 1. Linear Regression (baseline)"
"0","      tryCatch({"
"0","        lm_model <- lm(model_formula, data = train_data)"
"0","        lm_preds <- predict(lm_model, newdata = test_data)"
"0","        lm_rmse <- sqrt(mean((lm_preds - test_data$peg_deviation)^2))"
"0","        lm_r2 <- cor(lm_preds, test_data$peg_deviation)^2"
"0","        "
"0","        # Store results"
"0","        lm_results <- data.frame("
"0","          token = token_name,"
"0","          model = ""Linear Regression"","
"0","          rmse = lm_rmse,"
"0","          r_squared = lm_r2"
"0","        )"
"0","        alternative_results <- rbind(alternative_results, lm_results)"
"0","        model_objects[[token_name]][[""lm""]] <- lm_model"
"0","        "
"0","        # Add predictions to test data"
"0","        test_data$predicted_lm <- lm_preds"
"0","        "
"0","        cat(""Linear Regression RMSE:"", lm_rmse, ""R²:"", lm_r2, ""\n"")"
"0","      }, error = function(e) {"
"0","        cat(""Linear Regression failed:"", e$message, ""\n"")"
"0","      })"
"0","      "
"0","      # 2. Decision Tree"
"0","      tryCatch({"
"0","        tree_model <- rpart(model_formula, data = train_data, method = ""anova"")"
"0","        tree_preds <- predict(tree_model, newdata = test_data)"
"0","        tree_rmse <- sqrt(mean((tree_preds - test_data$peg_deviation)^2))"
"0","        tree_r2 <- cor(tree_preds, test_data$peg_deviation)^2"
"0","        "
"0","        # Store results"
"0","        tree_results <- data.frame("
"0","          token = token_name,"
"0","          model = ""Decision Tree"","
"0","          rmse = tree_rmse,"
"0","          r_squared = tree_r2"
"0","        )"
"0","        alternative_results <- rbind(alternative_results, tree_results)"
"0","        model_objects[[token_name]][[""tree""]] <- tree_model"
"0","        "
"0","        # Add predictions to test data"
"0","        test_data$predicted_tree <- tree_preds"
"0","        "
"0","        cat(""Decision Tree RMSE:"", tree_rmse, ""R²:"", tree_r2, ""\n"")"
"0","      }, error = function(e) {"
"0","        cat(""Decision Tree failed:"", e$message, ""\n"")"
"0","      })"
"0","      "
"0","      # 3. Random Forest (if enough data)"
"0","      if(nrow(train_data) >= 15) {"
"0","        tryCatch({"
"0","          rf_model <- randomForest(model_formula, data = train_data, ntree = 100)"
"0","          rf_preds <- predict(rf_model, newdata = test_data)"
"0","          rf_rmse <- sqrt(mean((rf_preds - test_data$peg_deviation)^2))"
"0","          rf_r2 <- cor(rf_preds, test_data$peg_deviation)^2"
"0","          "
"0","          # Store results"
"0","          rf_results <- data.frame("
"0","            token = token_name,"
"0","            model = ""Random Forest"","
"0","            rmse = rf_rmse,"
"0","            r_squared = rf_r2"
"0","          )"
"0","          alternative_results <- rbind(alternative_results, rf_results)"
"0","          model_objects[[token_name]][[""rf""]] <- rf_model"
"0","          "
"0","          # Add predictions to test data"
"0","          test_data$predicted_rf <- rf_preds"
"0","          "
"0","          cat(""Random Forest RMSE:"", rf_rmse, ""R²:"", rf_r2, ""\n"")"
"0","        }, error = function(e) {"
"0","          cat(""Random Forest failed:"", e$message, ""\n"")"
"0","        })"
"0","      }"
"0","      "
"0","      # Create scatter plot of actual vs predicted values"
"0","      if(nrow(test_data) > 0) {"
"0","        # Gather predictions into long format"
"0","        pred_cols <- grep(""^predicted_"", names(test_data), value = TRUE)"
"0","        if(length(pred_cols) > 0) {"
"0","          scatter_data <- data.frame("
"0","            actual = rep(test_data$peg_deviation, length(pred_cols)),"
"0","            predicted = unlist(lapply(pred_cols, function(col) test_data[[col]])),"
"0","            model = rep(gsub(""predicted_"", """", pred_cols), each = nrow(test_data))"
"0","          )"
"0","          "
"0","          p2 <- ggplot(scatter_data, aes(x = actual, y = predicted, color = model)) +"
"0","            geom_point(size = 3, alpha = 0.7) +"
"0","            geom_abline(intercept = 0, slope = 1, linetype = ""dashed"", color = ""gray50"") +"
"0","            labs(title = paste(""Actual vs Predicted for"", token_name),"
"0","                 x = ""Actual Peg Deviation"", "
"0","                 y = ""Predicted Peg Deviation"") +"
"0","            theme_minimal()"
"0","          )"
"2","Error: unexpected ')' in:
""            theme_minimal()
          )""
"
