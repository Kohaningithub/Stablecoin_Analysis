"0","if(!is.null(results$causal$prediction_data)) {"
"0","  prediction_data <- results$causal$prediction_data"
"0","  "
"0","  # Implement alternative prediction methods"
"0","  implement_alternative_models <- function(prediction_data) {"
"0","    if(is.null(prediction_data) || nrow(prediction_data) == 0) {"
"0","      cat(""No prediction data available\n"")"
"0","      return(NULL)"
"0","    }"
"0","    "
"0","    # Ensure required packages"
"0","    required_packages <- c(""rpart"", ""randomForest"", ""pls"")"
"0","    for(pkg in required_packages) {"
"0","      if(!requireNamespace(pkg, quietly = TRUE)) {"
"0","        cat(""Installing package:"", pkg, ""\n"")"
"0","        install.packages(pkg)"
"0","      }"
"0","      library(pkg, character.only = TRUE)"
"0","    }"
"0",""
"0","    # Results storage"
"0","    alternative_results <- data.frame()"
"0","    model_objects <- list()"
"0","    "
"0","    # For each token"
"0","    for(token_name in unique(prediction_data$token)) {"
"0","      cat(""\nBuilding alternative models for"", token_name, ""\n"")"
"0","      token_data <- prediction_data %>%"
"0","        filter(token == token_name)"
"0","      "
"0","      # Skip if insufficient data"
"0","      if(nrow(token_data) < 10) {"
"0","        cat(""Insufficient data for"", token_name, ""alternative models\n"")"
"0","        next"
"0","      }"
"0","      "
"0","      # Split into training and test sets (80/20)"
"0","      train_idx <- 1:floor(0.8 * nrow(token_data))"
"0","      train_data <- token_data[train_idx, ]"
"0","      test_data <- token_data[-train_idx, ]"
"0","      "
"0","      cat(""Training set:"", nrow(train_data), ""observations\n"")"
"0","      cat(""Test set:"", nrow(test_data), ""observations\n"")"
"0","      "
"0","      # Skip if test set is too small"
"0","      if(nrow(test_data) < 3) {"
"0","        cat(""Test set too small for"", token_name, ""\n"")"
"0","        next"
"0","      }"
"0",""
"0","      # Prepare model formula and data matrices"
"0","      model_formula <- peg_deviation ~ prev_deviation + rolling_avg + volatility + is_weekend + period_indicator"
"0","      "
"0","      # 1. Decision Tree"
"0","      tryCatch({"
"0","        tree_model <- rpart(model_formula, data = train_data, method = ""anova"")"
"0","        tree_preds <- predict(tree_model, newdata = test_data)"
"0","        tree_rmse <- sqrt(mean((tree_preds - test_data$peg_deviation)^2))"
"0","        tree_r2 <- cor(tree_preds, test_data$peg_deviation)^2"
"0","        "
"0","        # Store results"
"0","        tree_results <- data.frame("
"0","          token = token_name,"
"0","          model = ""Decision Tree"","
"0","          rmse = tree_rmse,"
"0","          r_squared = tree_r2"
"0","        )"
"0","        alternative_results <- rbind(alternative_results, tree_results)"
"0","        model_objects[[token_name]][[""tree""]] <- tree_model"
"0","        "
"0","        cat(""Decision Tree RMSE:"", tree_rmse, ""R²:"", tree_r2, ""\n"")"
"0","      }, error = function(e) {"
"0","        cat(""Decision Tree failed:"", e$message, ""\n"")"
"0","      })"
"0",""
"0","      # 2. Random Forest (if enough data)"
"0","      if(nrow(train_data) >= 15) {"
"0","        tryCatch({"
"0","          rf_model <- randomForest(model_formula, data = train_data, ntree = 100)"
"0","          rf_preds <- predict(rf_model, newdata = test_data)"
"0","          rf_rmse <- sqrt(mean((rf_preds - test_data$peg_deviation)^2))"
"0","          rf_r2 <- cor(rf_preds, test_data$peg_deviation)^2"
"0","          "
"0","          # Store results"
"0","          rf_results <- data.frame("
"0","            token = token_name,"
"0","            model = ""Random Forest"","
"0","            rmse = rf_rmse,"
"0","            r_squared = rf_r2"
"0","          )"
"0","          alternative_results <- rbind(alternative_results, rf_results)"
"0","          model_objects[[token_name]][[""rf""]] <- rf_model"
"0","          "
"0","          cat(""Random Forest RMSE:"", rf_rmse, ""R²:"", rf_r2, ""\n"")"
"0","        }, error = function(e) {"
"0","          cat(""Random Forest failed:"", e$message, ""\n"")"
"0","        })"
"0","      }"
"0",""
"0","      # 3. Principal Component Regression"
"0","      tryCatch({"
"0","        # Prepare data for PCR"
"0","        x_vars <- c(""prev_deviation"", ""rolling_avg"", ""volatility"", ""is_weekend"", ""period_indicator"")"
"0","        pcr_model <- pcr(peg_deviation ~ ., data = train_data[, c(""peg_deviation"", x_vars)], "
"0","                        validation = ""CV"", scale = TRUE)"
"0","        "
"0","        # Find optimal number of components"
"0","        cv_rmse <- RMSEP(pcr_model)"
"0","        optimal_ncomp <- which.min(cv_rmse$val[1, 1, ]) - 1"
"0","        if(optimal_ncomp < 1) optimal_ncomp <- 1"
"0","        "
"0","        # Make predictions"
"0","        pcr_preds <- predict(pcr_model, newdata = test_data, ncomp = optimal_ncomp)"
"0","        pcr_rmse <- sqrt(mean((pcr_preds - test_data$peg_deviation)^2))"
"0","        pcr_r2 <- cor(pcr_preds, test_data$peg_deviation)^2"
"0","        "
"0","        # Store results"
"0","        pcr_results <- data.frame("
"0","          token = token_name,"
"0","          model = ""PCR"","
"0","          rmse = pcr_rmse,"
"0","          r_squared = pcr_r2"
"0","        )"
"0","        alternative_results <- rbind(alternative_results, pcr_results)"
"0","        model_objects[[token_name]][[""pcr""]] <- pcr_model"
"0","        cat(""PCR RMSE:"", pcr_rmse, ""R²:"", pcr_r2, ""Components:"", optimal_ncomp, ""\n"")"
"0","      }, error = function(e) {"
"0","        cat(""PCR failed:"", e$message, ""\n"")"
"0","      })"
"0","    }"
"0","    "
"0","    # Compare all models"
"0","    if(nrow(alternative_results) > 0) {"
"0","      # Plot comparison"
"0","      p1 <- ggplot(alternative_results, aes(x = token, y = rmse, fill = model)) +"
"0","        geom_bar(stat = ""identity"", position = ""dodge"") +"
"0","        geom_text(aes(label = sprintf(""%.6f"", rmse)), "
"0","                  position = position_dodge(width = 0.9), "
"0","                  vjust = -0.5, size = 3) +"
"0","        labs(title = ""Model Performance Comparison"","
"0","             x = ""Token"", y = ""RMSE (lower is better)"") +"
"0","        theme_minimal() +"
"0","        theme(axis.text.x = element_text(angle = 45, hjust = 1))"
"0","      "
"0","      print(p1)"
"0",""
"0","      # R-squared comparison"
"0","      p2 <- ggplot(alternative_results, aes(x = token, y = r_squared, fill = model)) +"
"0","        geom_bar(stat = ""identity"", position = ""dodge"") +"
"0","        geom_text(aes(label = sprintf(""%.2f"", r_squared)), "
"0","                  position = position_dodge(width = 0.9), "
"0","                  vjust = -0.5, size = 3) +"
"0","        labs(title = ""Model Explanatory Power"","
"0","             x = ""Token"", y = ""R-squared (higher is better)"") +"
"0","        theme_minimal() +"
"0","        theme(axis.text.x = element_text(angle = 45, hjust = 1))"
"0","      "
"0","      print(p2)"
"0","    }"
"0","    "
"0","    return(list("
"0","      results = alternative_results,"
"0","      models = model_objects"
"0","    ))"
"0","  }"
"0","  "
"0","  # Run alternative models"
"0","  alternative_model_results <- implement_alternative_models(prediction_data)"
"0","}"
