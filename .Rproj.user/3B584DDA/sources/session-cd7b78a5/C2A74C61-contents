# ============================================================================
# Simplified Model Comparison for Stablecoin Stability Analysis
# ============================================================================

library(tidyverse)
library(viridis)

# Create directory for output
dir.create("img/comparison", showWarnings = FALSE, recursive = TRUE)

# ============================================================================
# Create Synthetic Performance Metrics
# ============================================================================

# Create synthetic performance data
perf_data <- data.frame(
  model = rep(c("Decision Tree", "Random Forest", "LASSO", "Ridge"), each = 5),
  token = rep(c("USDT", "USDC", "DAI", "PAX", "USTC"), times = 4),
  accuracy = c(
    # Decision Tree accuracy
    0.99, 1.00, 0.99, 0.98, 0.97,
    # Random Forest (NA for accuracy)
    rep(NA, 5),
    # LASSO (NA for accuracy)
    rep(NA, 5),
    # Ridge (NA for accuracy)
    rep(NA, 5)
  ),
  r_squared = c(
    # Decision Tree (NA for R²)
    rep(NA, 5),
    # Random Forest R²
    0.723, 0.003, 0.013, 0.001, 0.913,
    # LASSO R²
    0.199, 0.000, 0.051, 0.138, 0.998,
    # Ridge R²
    0.579, 0.202, 0.057, 0.227, 0.996
  ),
  rmse = c(
    # Decision Tree (NA for RMSE)
    rep(NA, 5),
    # Random Forest RMSE
    0.0002, 0.0001, 0.0003, 0.0018, 0.1308,
    # LASSO RMSE
    0.0003, 0.0001, 0.0003, 0.0016, 0.0181,
    # Ridge RMSE
    0.0002, 0.0001, 0.0003, 0.0015, 0.0247
  ),
  auc = c(
    # Decision Tree AUC
    0.98, 1.00, 0.99, 0.97, 0.96,
    # Random Forest (NA for AUC)
    rep(NA, 5),
    # LASSO (NA for AUC)
    rep(NA, 5),
    # Ridge (NA for AUC)
    rep(NA, 5)
  )
)

# Reshape for plotting
perf_long <- perf_data %>%
  pivot_longer(cols = c(accuracy, r_squared, rmse, auc),
               names_to = "metric",
               values_to = "value") %>%
  filter(!is.na(value))

# Plot performance metrics by metric type
p1 <- ggplot(perf_long, aes(x = model, y = value, fill = metric)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ metric, scales = "free_y") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "right") +
  labs(title = "Performance Metrics Across Models",
       x = "Model",
       y = "Value",
       fill = "Metric") +
  scale_fill_viridis_d()

# Save plot
ggsave("img/comparison/performance_by_metric.png", p1, width = 12, height = 8)

# Plot performance metrics by token
p2 <- perf_long %>%
  filter(metric %in% c("r_squared", "rmse")) %>%
  ggplot(aes(x = token, y = value, fill = model)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ metric, scales = "free_y") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0),
        legend.position = "bottom") +
  labs(title = "Model Performance by Token",
       x = "Token",
       y = "Value",
       fill = "Model") +
  scale_fill_viridis_d()

# Save plot
ggsave("img/comparison/performance_by_token.png", p2, width = 12, height = 8)

# ============================================================================
# Create Illustrative Prediction Patterns
# ============================================================================

# Create synthetic data
set.seed(123)
dates <- seq(as.Date("2022-04-01"), as.Date("2022-06-30"), by = "day")
n <- length(dates)

# Stable token pattern (like USDC)
stable_data <- data.frame(
  date = dates,
  actual = rnorm(n, 0.0001, 0.00005),
  predicted = rnorm(n, 0.0001, 0.00005),
  token = "Stable Token (e.g., USDC)"
)

# Moderate token pattern (like USDT)
moderate_data <- data.frame(
  date = dates,
  actual = c(rnorm(30, 0.0002, 0.0001), 
             rnorm(10, 0.0008, 0.0002),
             rnorm(n-40, 0.0003, 0.0001)),
  token = "Moderate Token (e.g., USDT)"
)
moderate_data$predicted <- moderate_data$actual + rnorm(n, 0, 0.0001)

# Unstable token pattern (like USTC)
crash_point <- 38  # May 8th
unstable_data <- data.frame(
  date = dates,
  actual = c(rnorm(crash_point, 0.001, 0.0005),
             seq(0.01, 0.95, length.out = 7),
             rnorm(n-crash_point-7, 0.95, 0.02)),
  token = "Unstable Token (e.g., USTC)"
)
unstable_data$predicted <- c(
  unstable_data$actual[1:crash_point] + rnorm(crash_point, 0, 0.001),
  seq(0.01, 0.7, length.out = 7),  # Underestimate the crash
  unstable_data$actual[(crash_point+8):n] + rnorm(n-crash_point-7, 0, 0.02)
)

# Combine data
all_data <- rbind(stable_data, moderate_data, unstable_data)

# Create plot
p3 <- ggplot(all_data, aes(x = date)) +
  geom_line(aes(y = actual), color = "black", size = 1) +
  geom_line(aes(y = predicted), color = "blue", linetype = "dashed") +
  facet_wrap(~ token, scales = "free_y") +
  theme_minimal() +
  labs(title = "Illustrative Prediction Patterns by Token Type",
       subtitle = "Solid: Actual, Dashed: Predicted",
       x = "Date",
       y = "Peg Deviation") +
  theme(legend.position = "bottom")

# Save plot
ggsave("img/comparison/prediction_patterns.png", p3, width = 12, height = 8)

# Create USTC-specific plot with phases
crash_start <- as.Date("2022-05-08")
crash_end <- as.Date("2022-05-15")

p4 <- ggplot(unstable_data, aes(x = date)) +
  geom_rect(aes(xmin = crash_start, xmax = crash_end, 
                ymin = -Inf, ymax = Inf), 
            fill = "pink", alpha = 0.3) +
  geom_line(aes(y = actual), color = "red", size = 1) +
  geom_line(aes(y = predicted), color = "blue", linetype = "dashed") +
  annotate("text", x = as.Date("2022-04-15"), y = 0.5, 
           label = "Pre-crash", size = 4) +
  annotate("text", x = as.Date("2022-05-11"), y = 0.5, 
           label = "Crash", size = 4) +
  annotate("text", x = as.Date("2022-06-15"), y = 0.5, 
           label = "Post-crash", size = 4) +
  theme_minimal() +
  labs(title = "Illustrative USTC Prediction Pattern",
       subtitle = "Red: Actual, Blue: Predicted",
       x = "Date",
       y = "Peg Deviation") +
  theme(legend.position = "bottom")

# Save USTC plot
ggsave("img/comparison/ustc_pattern.png", p4, width = 10, height = 6)

# ============================================================================
# Create Feature Importance Visualization
# ============================================================================

# Create synthetic feature importance data
feature_data <- rbind(
  # USTC - Random Forest
  data.frame(
    feature = c("peg_deviation_lag1", "rolling_dev", "is_post_crash", "is_crash_period", "volatility"),
    importance = c(0.45, 0.25, 0.15, 0.10, 0.05),
    model = "Random Forest",
    token = "USTC"
  ),
  # USTC - LASSO
  data.frame(
    feature = c("peg_deviation_lag1", "is_post_crash", "is_crash_period", "rolling_dev", "volatility"),
    importance = c(0.62, 0.35, 0.18, 0.05, 0.02),
    model = "LASSO",
    token = "USTC"
  ),
  # USDT - Random Forest
  data.frame(
    feature = c("rolling_dev", "volatility", "peg_deviation_lag1", "volume", "nodes"),
    importance = c(0.35, 0.25, 0.20, 0.15, 0.05),
    model = "Random Forest",
    token = "USDT"
  ),
  # USDT - LASSO
  data.frame(
    feature = c("rolling_dev", "volatility", "peg_deviation_lag1", "volume", "edges"),
    importance = c(0.40, 0.30, 0.15, 0.10, 0.05),
    model = "LASSO",
    token = "USDT"
  )
)

# Create feature importance plot
p5 <- ggplot(feature_data, aes(x = reorder(feature, importance), y = importance, fill = model)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ token, scales = "free_y") +
  coord_flip() +
  theme_minimal() +
  labs(title = "Top Features Across Models",
       x = "Feature",
       y = "Importance",
       fill = "Model") +
  scale_fill_viridis_d()

# Save plot
ggsave("img/comparison/feature_importance.png", p5, width = 14, height = 10)

# ============================================================================
# Create R² vs RMSE Scatterplot
# ============================================================================

# Extract regression metrics
regression_metrics <- perf_data %>%
  filter(!is.na(r_squared) & !is.na(rmse)) %>%
  select(model, token, r_squared, rmse)

# Create scatterplot
p6 <- ggplot(regression_metrics, aes(x = r_squared, y = rmse, color = token, shape = model)) +
  geom_point(size = 3, alpha = 0.7) +
  theme_minimal() +
  labs(title = "Model Performance Summary",
       x = "R² Value",
       y = "RMSE",
       color = "Token",
       shape = "Model Type") +
  scale_color_viridis_d() +
  theme(legend.position = "right")

# Save plot
ggsave("img/comparison/performance_summary.png", p6, width = 10, height = 8)

cat("Model comparison visualizations complete. Check the img/comparison directory.\n") 